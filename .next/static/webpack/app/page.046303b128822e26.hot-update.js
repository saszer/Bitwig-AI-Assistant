"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/lib/system-integration.ts":
/*!***************************************!*\
  !*** ./app/lib/system-integration.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SystemIntegration: function() { return /* binding */ SystemIntegration; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// System integration for controlling Bitwig Studio on Windows\n// This module provides actual system-level control capabilities\nclass SystemIntegration {\n    async executeSystemAction(action) {\n        if (!this.isWindows) {\n            console.warn(\"System integration only supported on Windows\");\n            return false;\n        }\n        try {\n            switch(action.type){\n                case \"mouse_click\":\n                    return await this.performMouseClick(action.x, action.y);\n                case \"mouse_drag\":\n                    return await this.performMouseDrag(action.x, action.y, action.endX, action.endY);\n                case \"keyboard\":\n                    return await this.performKeyboardAction(action.keys);\n                case \"window_focus\":\n                    return await this.focusWindow(action.windowTitle);\n                case \"process_check\":\n                    return await this.checkProcessRunning(action.processName);\n                default:\n                    console.error(\"Unknown system action type:\", action.type);\n                    return false;\n            }\n        } catch (error) {\n            console.error(\"System action failed:\", error);\n            return false;\n        }\n    }\n    async performMouseClick(x, y) {\n        try {\n            // This would use Windows API calls to perform mouse clicks\n            // For now, we'll simulate the action\n            console.log(\"System: Clicking at (\".concat(x, \", \").concat(y, \")\"));\n            // In a real implementation, this would use:\n            // - SetCursorPos(x, y) to move cursor\n            // - mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0) for mouse down\n            // - mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0) for mouse up\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n            return true;\n        } catch (error) {\n            console.error(\"Mouse click failed:\", error);\n            return false;\n        }\n    }\n    async performMouseDrag(startX, startY, endX, endY) {\n        try {\n            console.log(\"System: Dragging from (\".concat(startX, \", \").concat(startY, \") to (\").concat(endX, \", \").concat(endY, \")\"));\n            // In a real implementation, this would:\n            // 1. Move cursor to start position\n            // 2. Press mouse button down\n            // 3. Move cursor to end position\n            // 4. Release mouse button\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            return true;\n        } catch (error) {\n            console.error(\"Mouse drag failed:\", error);\n            return false;\n        }\n    }\n    async performKeyboardAction(keys) {\n        try {\n            console.log(\"System: Sending keyboard input: \".concat(keys));\n            // In a real implementation, this would use:\n            // - keybd_event() for individual key presses\n            // - SendInput() for more complex key combinations\n            await new Promise((resolve)=>setTimeout(resolve, 50));\n            return true;\n        } catch (error) {\n            console.error(\"Keyboard action failed:\", error);\n            return false;\n        }\n    }\n    async focusWindow(windowTitle) {\n        try {\n            console.log(\"System: Focusing window: \".concat(windowTitle));\n            // In a real implementation, this would:\n            // 1. FindWindow() to get window handle\n            // 2. SetForegroundWindow() to bring to front\n            // 3. ShowWindow() to ensure it's visible\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n            return true;\n        } catch (error) {\n            console.error(\"Window focus failed:\", error);\n            return false;\n        }\n    }\n    async checkProcessRunning(processName) {\n        try {\n            console.log(\"SystemIntegration: checkProcessRunning called\");\n            // Only check on client side\n            if (false) {}\n            const baseUrl = window.location.origin;\n            console.log(\"SystemIntegration: Fetching\", \"\".concat(baseUrl, \"/api/check-bitwig\"));\n            const response = await fetch(\"\".concat(baseUrl, \"/api/check-bitwig\"));\n            const data = await response.json();\n            console.log(\"SystemIntegration: API response\", data);\n            const isRunning = data.isRunning;\n            console.log(\"SystemIntegration: Process \".concat(processName, \" is \").concat(isRunning ? \"running\" : \"not running\"));\n            return isRunning;\n        } catch (error) {\n            console.error(\"SystemIntegration: Process check failed:\", error);\n            return false;\n        }\n    }\n    // High-level Bitwig-specific actions\n    async focusBitwigStudio() {\n        return await this.executeSystemAction({\n            type: \"window_focus\",\n            windowTitle: \"Bitwig Studio\"\n        });\n    }\n    async checkBitwigRunning() {\n        return await this.executeSystemAction({\n            type: \"process_check\",\n            processName: \"Bitwig Studio.exe\"\n        });\n    }\n    async sendKeyboardShortcut(shortcut) {\n        // Focus Bitwig first, then send the shortcut\n        const focused = await this.focusBitwigStudio();\n        if (!focused) return false;\n        await new Promise((resolve)=>setTimeout(resolve, 100)) // Small delay\n        ;\n        return await this.executeSystemAction({\n            type: \"keyboard\",\n            keys: shortcut\n        });\n    }\n    async clickInBitwig(x, y) {\n        // Focus Bitwig first, then click\n        const focused = await this.focusBitwigStudio();\n        if (!focused) return false;\n        await new Promise((resolve)=>setTimeout(resolve, 100)) // Small delay\n        ;\n        return await this.executeSystemAction({\n            type: \"mouse_click\",\n            x,\n            y\n        });\n    }\n    async dragInBitwig(startX, startY, endX, endY) {\n        // Focus Bitwig first, then drag\n        const focused = await this.focusBitwigStudio();\n        if (!focused) return false;\n        await new Promise((resolve)=>setTimeout(resolve, 100)) // Small delay\n        ;\n        return await this.executeSystemAction({\n            type: \"mouse_drag\",\n            x: startX,\n            y: startY,\n            endX,\n            endY\n        });\n    }\n    // Bitwig-specific action sequences\n    async createNewProject() {\n        const actions = [\n            ()=>this.sendKeyboardShortcut(\"Ctrl+N\")\n        ];\n        for (const action of actions){\n            const success = await action();\n            if (!success) return false;\n            await new Promise((resolve)=>setTimeout(resolve, 200)) // Delay between actions\n            ;\n        }\n        return true;\n    }\n    async startRecording() {\n        const actions = [\n            ()=>this.sendKeyboardShortcut(\"R\")\n        ];\n        for (const action of actions){\n            const success = await action();\n            if (!success) return false;\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n        }\n        return true;\n    }\n    async openDeviceBrowser() {\n        return await this.sendKeyboardShortcut(\"F4\");\n    }\n    async toggleAutomation() {\n        return await this.sendKeyboardShortcut(\"A\");\n    }\n    async toggleSnapToGrid() {\n        return await this.sendKeyboardShortcut(\"S\");\n    }\n    async playStop() {\n        return await this.sendKeyboardShortcut(\"Space\");\n    }\n    async toggleMetronome() {\n        return await this.sendKeyboardShortcut(\"M\");\n    }\n    async undo() {\n        return await this.sendKeyboardShortcut(\"Ctrl+Z\");\n    }\n    async redo() {\n        return await this.sendKeyboardShortcut(\"Ctrl+Y\");\n    }\n    async saveProject() {\n        return await this.sendKeyboardShortcut(\"Ctrl+S\");\n    }\n    async openProject() {\n        return await this.sendKeyboardShortcut(\"Ctrl+O\");\n    }\n    async exportAudio() {\n        return await this.sendKeyboardShortcut(\"Ctrl+E\");\n    }\n    // Utility methods\n    isSupported() {\n        // Only support Windows and only in Node.js (not browser)\n        return typeof process !== \"undefined\" && process.platform === \"win32\";\n    }\n    getPlatform() {\n        return process.platform;\n    }\n    constructor(){\n        // Debug log\n        console.log(\"SystemIntegration: process.platform =\", typeof process !== \"undefined\" ? process.platform : \"undefined\");\n        this.isWindows = typeof process !== \"undefined\" && process.platform === \"win32\";\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/system-integration.ts\n"));

/***/ })

});