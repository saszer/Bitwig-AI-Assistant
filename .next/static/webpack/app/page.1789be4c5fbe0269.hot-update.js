/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/process.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLHFDQUFxQyxxQkFBTSxpRkFBaUYscUJBQU0sa0VBQWtFLHFCQUFNLFdBQVcsbUJBQU8sQ0FBQyw0R0FBNEI7O0FBRXpQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanM/YmZhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfZ2xvYmFsX3Byb2Nlc3MsIF9nbG9iYWxfcHJvY2VzczE7XG5tb2R1bGUuZXhwb3J0cyA9ICgoX2dsb2JhbF9wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MuZW52KSAmJiB0eXBlb2YgKChfZ2xvYmFsX3Byb2Nlc3MxID0gZ2xvYmFsLnByb2Nlc3MpID09IG51bGwgPyB2b2lkIDAgOiBfZ2xvYmFsX3Byb2Nlc3MxLmVudikgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzc1wiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvY2Vzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/process/browser.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLE9BQU8sZ0JBQWdCLG1CQUFtQixNQUFNLE1BQU0sNEJBQTRCLG1EQUFtRCwrQkFBK0IscURBQXFELFlBQVksSUFBSSxtQ0FBbUMsYUFBYSxLQUFLLG9CQUFvQixTQUFTLG1CQUFtQixJQUFJLHFDQUFxQyxlQUFlLEtBQUssdUJBQXVCLFNBQVMsdUJBQXVCLElBQUksdUJBQXVCLG1CQUFtQix1QkFBdUIsMkNBQTJDLGFBQWEsdUJBQXVCLElBQUksY0FBYyxTQUFTLElBQUksd0JBQXdCLFNBQVMsMEJBQTBCLDRCQUE0QixxQkFBcUIsdUJBQXVCLGdEQUFnRCxlQUFlLHVCQUF1QixJQUFJLFlBQVksU0FBUyxJQUFJLHNCQUFzQixTQUFTLHdCQUF3QixTQUFTLFlBQVksTUFBTSxTQUFTLDJCQUEyQixXQUFXLE9BQU8sUUFBUSxhQUFhLGNBQWMsS0FBSyxLQUFLLGFBQWEsY0FBYyxzQkFBc0IsTUFBTSxPQUFPLGtDQUFrQyxPQUFPLGVBQWUsU0FBUyxJQUFJLEtBQUssYUFBYSxNQUFNLFlBQVksS0FBSyxXQUFXLE9BQU8sUUFBUSxtQkFBbUIsdUJBQXVCLG9DQUFvQyx1QkFBdUIsWUFBWSxtQkFBbUIsS0FBSyxxQkFBcUIsc0JBQXNCLHFCQUFxQix5QkFBeUIsbUJBQW1CLFdBQVcsYUFBYSw4QkFBOEIsaUNBQWlDLGtCQUFrQixlQUFlLFNBQVMsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLFVBQVUsbUJBQW1CLFlBQVksV0FBVyxzQkFBc0IsMEJBQTBCLFlBQVksdUJBQXVCLDJCQUEyQix3QkFBd0IsVUFBVSxzQkFBc0IscURBQXFELGlCQUFpQixXQUFXLG9CQUFvQixtREFBbUQsbUJBQW1CLFlBQVksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcz83Y2EyIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe3ZhciBlPXsyMjk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5leHBvcnRzPXt9O3ZhciByO3ZhciBuO2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e2lmKHR5cGVvZiBzZXRUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtyPXNldFRpbWVvdXR9ZWxzZXtyPWRlZmF1bHRTZXRUaW1vdXR9fWNhdGNoKGUpe3I9ZGVmYXVsdFNldFRpbW91dH10cnl7aWYodHlwZW9mIGNsZWFyVGltZW91dD09PVwiZnVuY3Rpb25cIil7bj1jbGVhclRpbWVvdXR9ZWxzZXtuPWRlZmF1bHRDbGVhclRpbWVvdXR9fWNhdGNoKGUpe249ZGVmYXVsdENsZWFyVGltZW91dH19KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZSl7aWYocj09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGUsMCl9aWYoKHI9PT1kZWZhdWx0U2V0VGltb3V0fHwhcikmJnNldFRpbWVvdXQpe3I9c2V0VGltZW91dDtyZXR1cm4gc2V0VGltZW91dChlLDApfXRyeXtyZXR1cm4gcihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChlKXtpZihuPT09Y2xlYXJUaW1lb3V0KXtyZXR1cm4gY2xlYXJUaW1lb3V0KGUpfWlmKChuPT09ZGVmYXVsdENsZWFyVGltZW91dHx8IW4pJiZjbGVhclRpbWVvdXQpe249Y2xlYXJUaW1lb3V0O3JldHVybiBjbGVhclRpbWVvdXQoZSl9dHJ5e3JldHVybiBuKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gbi5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIG4uY2FsbCh0aGlzLGUpfX19dmFyIGk9W107dmFyIG89ZmFsc2U7dmFyIHU7dmFyIGE9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7aWYoIW98fCF1KXtyZXR1cm59bz1mYWxzZTtpZih1Lmxlbmd0aCl7aT11LmNvbmNhdChpKX1lbHNle2E9LTF9aWYoaS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKG8pe3JldHVybn12YXIgZT1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7bz10cnVlO3ZhciB0PWkubGVuZ3RoO3doaWxlKHQpe3U9aTtpPVtdO3doaWxlKCsrYTx0KXtpZih1KXt1W2FdLnJ1bigpfX1hPS0xO3Q9aS5sZW5ndGh9dT1udWxsO289ZmFsc2U7cnVuQ2xlYXJUaW1lb3V0KGUpfXQubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt0W3ItMV09YXJndW1lbnRzW3JdfX1pLnB1c2gobmV3IEl0ZW0oZSx0KSk7aWYoaS5sZW5ndGg9PT0xJiYhbyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZSx0KXt0aGlzLmZ1bj1lO3RoaXMuYXJyYXk9dH1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTt0LnRpdGxlPVwiYnJvd3NlclwiO3QuYnJvd3Nlcj10cnVlO3QuZW52PXt9O3QuYXJndj1bXTt0LnZlcnNpb249XCJcIjt0LnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9dC5vbj1ub29wO3QuYWRkTGlzdGVuZXI9bm9vcDt0Lm9uY2U9bm9vcDt0Lm9mZj1ub29wO3QucmVtb3ZlTGlzdGVuZXI9bm9vcDt0LnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3QuZW1pdD1ub29wO3QucHJlcGVuZExpc3RlbmVyPW5vb3A7dC5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7dC5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119O3QuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07dC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07dC5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9O3QudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHIpe3ZhciBuPXRbcl07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT10W3JdPXtleHBvcnRzOnt9fTt2YXIgbz10cnVlO3RyeXtlW3JdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO289ZmFsc2V9ZmluYWxseXtpZihvKWRlbGV0ZSB0W3JdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciByPV9fbmNjd3Bja19yZXF1aXJlX18oMjI5KTttb2R1bGUuZXhwb3J0cz1yfSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/lib/bitwig-controller.ts":
/*!**************************************!*\
  !*** ./app/lib/bitwig-controller.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitwigController: function() { return /* binding */ BitwigController; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nclass BitwigController {\n    async initializeConnection() {\n        try {\n            console.log(\"BitwigController: Initializing connection...\");\n            // Check if we're in browser environment\n            if (false) {}\n            // Use API route to check Bitwig status\n            const baseUrl = window.location.origin;\n            console.log(\"BitwigController: Checking Bitwig via API...\");\n            const response = await fetch(\"\".concat(baseUrl, \"/api/check-bitwig\"));\n            const data = await response.json();\n            this.isConnected = data.isRunning;\n            this.isInitialized = true;\n            if (this.isConnected) {\n                console.log(\"BitwigController: Bitwig Studio detected and ready for control\");\n            } else {\n                console.log(\"BitwigController: Bitwig Studio not detected. Please start Bitwig Studio first.\");\n            }\n        } catch (error) {\n            console.error(\"BitwigController: Failed to initialize Bitwig connection:\", error);\n            this.isConnected = false;\n            this.isInitialized = true;\n        }\n    }\n    async checkBitwigRunning() {\n        // Use API route instead of SystemIntegration\n        if (false) {}\n        try {\n            const baseUrl = window.location.origin;\n            const response = await fetch(\"\".concat(baseUrl, \"/api/check-bitwig\"));\n            const data = await response.json();\n            return data.isRunning;\n        } catch (error) {\n            console.error(\"BitwigController: Failed to check Bitwig status:\", error);\n            return false;\n        }\n    }\n    async executeAction(action) {\n        if (!this.isConnected) {\n            return {\n                success: false,\n                message: \"Bitwig Studio is not running. Please start Bitwig Studio first.\"\n            };\n        }\n        try {\n            switch(action.type){\n                case \"click\":\n                    return await this.performClick(action);\n                case \"drag\":\n                    return await this.performDrag(action);\n                case \"keyboard\":\n                    return await this.performKeyboardAction(action);\n                case \"menu\":\n                    return await this.performMenuAction(action);\n                case \"parameter\":\n                    return await this.performParameterAction(action);\n                case \"device\":\n                    return await this.performDeviceAction(action);\n                case \"track\":\n                    return await this.performTrackAction(action);\n                default:\n                    return {\n                        success: false,\n                        message: \"Unknown action type: \".concat(action.type)\n                    };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: \"Failed to execute action: \".concat(error)\n            };\n        }\n    }\n    async performClick(action) {\n        if (action.coordinates) {\n            console.log(\"Simulating click at coordinates (\".concat(action.coordinates.x, \", \").concat(action.coordinates.y, \")\"));\n            // Simulate the action with a delay\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            return {\n                success: true,\n                message: \"Clicked \".concat(action.target, \" at coordinates (\").concat(action.coordinates.x, \", \").concat(action.coordinates.y, \")\")\n            };\n        }\n        return {\n            success: false,\n            message: \"No coordinates provided for click action\"\n        };\n    }\n    async performDrag(action) {\n        if (action.coordinates && action.value) {\n            console.log(\"Simulating drag from (\".concat(action.coordinates.x, \", \").concat(action.coordinates.y, \") to (\").concat(action.value.x, \", \").concat(action.value.y, \")\"));\n            // Simulate the action with a delay\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n            return {\n                success: true,\n                message: \"Dragged from (\".concat(action.coordinates.x, \", \").concat(action.coordinates.y, \") to (\").concat(action.value.x, \", \").concat(action.value.y, \")\")\n            };\n        }\n        return {\n            success: false,\n            message: \"Invalid drag parameters\"\n        };\n    }\n    async performKeyboardAction(action) {\n        console.log(\"Simulating keyboard input: \".concat(action.target));\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        return {\n            success: true,\n            message: \"Sent keyboard input: \".concat(action.target)\n        };\n    }\n    async performMenuAction(action) {\n        // Menu actions are typically keyboard shortcuts or clicks\n        // For now, we'll treat them as keyboard actions\n        return await this.performKeyboardAction(action);\n    }\n    async performParameterAction(action) {\n        // Parameter actions might involve clicking on UI elements\n        // For now, we'll simulate them\n        console.log(\"Setting parameter \".concat(action.target, \" to \").concat(action.value));\n        // In a real implementation, this would:\n        // 1. Find the parameter control in the UI\n        // 2. Click on it or drag to set the value\n        // 3. Update the parameter\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        return {\n            success: true,\n            message: \"Set parameter \".concat(action.target, \" to \").concat(action.value)\n        };\n    }\n    async performDeviceAction(action) {\n        // Device actions might involve:\n        // - Opening device browser (F4)\n        // - Clicking to add devices\n        // - Dragging devices to tracks\n        switch(action.target){\n            case \"add_eq_device\":\n                console.log(\"Simulating: Opening device browser and adding EQ device\");\n                // Simulate the action with a delay\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n                return {\n                    success: true,\n                    message: \"EQ+ device added to track\"\n                };\n            case \"add_selected_device\":\n                console.log(\"Simulating: Adding selected device to track\");\n                // Simulate the action with a delay\n                await new Promise((resolve)=>setTimeout(resolve, 300));\n                return {\n                    success: true,\n                    message: \"Selected device added to track\"\n                };\n            default:\n                console.log(\"Simulating device action: \".concat(action.target));\n                // Simulate the action with a delay\n                await new Promise((resolve)=>setTimeout(resolve, 200));\n                return {\n                    success: true,\n                    message: \"Device action completed: \".concat(action.target)\n                };\n        }\n    }\n    async performTrackAction(action) {\n        // Track actions might involve:\n        // - Right-clicking to add tracks\n        // - Clicking track controls\n        // - Managing track settings\n        switch(action.target){\n            case \"add_midi_track\":\n                // This would right-click in track list and select \"Add MIDI Track\"\n                // For now, we'll simulate the action\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n                return {\n                    success: true,\n                    message: \"MIDI track added successfully\"\n                };\n            default:\n                return {\n                    success: true,\n                    message: \"Track action completed: \".concat(action.target)\n                };\n        }\n    }\n    // High-level action methods\n    async createNewProject() {\n        console.log(\"Simulating: Creating new project\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 300));\n        return {\n            success: true,\n            message: \"New project created successfully\"\n        };\n    }\n    async recordAudio() {\n        const actions = [\n            {\n                type: \"click\",\n                target: \"record_arm_button\",\n                coordinates: {\n                    x: 150,\n                    y: 100\n                },\n                description: \"Arm track for recording\"\n            },\n            {\n                type: \"click\",\n                target: \"main_record_button\",\n                coordinates: {\n                    x: 400,\n                    y: 50\n                },\n                description: \"Start recording\"\n            }\n        ];\n        for (const action of actions){\n            const result = await this.executeAction(action);\n            if (!result.success) return result;\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n        }\n        return {\n            success: true,\n            message: \"Audio recording started\"\n        };\n    }\n    async addEQDevice() {\n        const action = {\n            type: \"device\",\n            target: \"add_eq_device\",\n            description: \"Add EQ+ device to track\"\n        };\n        return await this.executeAction(action);\n    }\n    async setTrackVolume(trackIndex, volume) {\n        const action = {\n            type: \"parameter\",\n            target: \"track_volume\",\n            value: volume,\n            description: \"Set track \".concat(trackIndex, \" volume to \").concat(volume, \"dB\")\n        };\n        return await this.executeAction(action);\n    }\n    async enableAutomation() {\n        console.log(\"Simulating: Enabling automation\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 200));\n        return {\n            success: true,\n            message: \"Automation mode enabled\"\n        };\n    }\n    // Additional Bitwig control methods\n    async playStop() {\n        console.log(\"Simulating: Toggling playback\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        return {\n            success: true,\n            message: \"Playback toggled\"\n        };\n    }\n    async toggleMetronome() {\n        console.log(\"Simulating: Toggling metronome\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        return {\n            success: true,\n            message: \"Metronome toggled\"\n        };\n    }\n    async undo() {\n        console.log(\"Simulating: Performing undo\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        return {\n            success: true,\n            message: \"Undo performed\"\n        };\n    }\n    async redo() {\n        console.log(\"Simulating: Performing redo\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        return {\n            success: true,\n            message: \"Redo performed\"\n        };\n    }\n    async saveProject() {\n        console.log(\"Simulating: Saving project\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 200));\n        return {\n            success: true,\n            message: \"Project saved\"\n        };\n    }\n    async openProject() {\n        console.log(\"Simulating: Opening project\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 300));\n        return {\n            success: true,\n            message: \"Project opened\"\n        };\n    }\n    async exportAudio() {\n        console.log(\"Simulating: Starting audio export\");\n        // Simulate the action with a delay\n        await new Promise((resolve)=>setTimeout(resolve, 500));\n        return {\n            success: true,\n            message: \"Audio export started\"\n        };\n    }\n    getConnectionStatus() {\n        return this.isConnected && this.isInitialized;\n    }\n    isInitializationComplete() {\n        return this.isInitialized;\n    }\n    async waitForInitialization() {\n        while(!this.isInitialized){\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n        return this.isConnected;\n    }\n    async reconnect() {\n        this.isConnected = false;\n        this.isInitialized = false;\n        await this.initializeConnection();\n        return this.isConnected;\n    }\n    getSystemInfo() {\n        return {\n            platform: typeof process !== \"undefined\" ? process.platform : \"browser\",\n            supported: \"object\" !== \"undefined\"\n        };\n    }\n    constructor(){\n        this.isConnected = false;\n        this.isInitialized = false;\n        this.actionQueue = [];\n        // Only initialize connection on client side\n        if (true) {\n            this.initializeConnection();\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/bitwig-controller.ts\n"));

/***/ })

});