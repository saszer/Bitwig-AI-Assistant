"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/lib/bitwig-controller.ts":
/*!**************************************!*\
  !*** ./app/lib/bitwig-controller.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitwigController: function() { return /* binding */ BitwigController; }\n/* harmony export */ });\nclass BitwigController {\n    async initializeConnection() {\n        try {\n            console.log(\"BitwigController: Initializing connection...\");\n            // Check if we're in browser environment\n            if (false) {}\n            // Use API route to check Bitwig status\n            const baseUrl = window.location.origin;\n            console.log(\"BitwigController: Checking Bitwig via API...\");\n            const response = await fetch(\"\".concat(baseUrl, \"/api/check-bitwig\"));\n            const data = await response.json();\n            this.isConnected = data.isRunning;\n            this.isInitialized = true;\n            if (this.isConnected) {\n                console.log(\"BitwigController: Bitwig Studio detected and ready for control\");\n            } else {\n                console.log(\"BitwigController: Bitwig Studio not detected. Please start Bitwig Studio first.\");\n            }\n        } catch (error) {\n            console.error(\"BitwigController: Failed to initialize Bitwig connection:\", error);\n            this.isConnected = false;\n            this.isInitialized = true;\n        }\n    }\n    async checkBitwigRunning() {\n        // Use API route instead of SystemIntegration\n        if (false) {}\n        try {\n            const baseUrl = window.location.origin;\n            const response = await fetch(\"\".concat(baseUrl, \"/api/check-bitwig\"));\n            const data = await response.json();\n            return data.isRunning;\n        } catch (error) {\n            console.error(\"BitwigController: Failed to check Bitwig status:\", error);\n            return false;\n        }\n    }\n    async executeAction(action) {\n        if (!this.isConnected) {\n            return {\n                success: false,\n                message: \"Bitwig Studio is not running. Please start Bitwig Studio first.\"\n            };\n        }\n        try {\n            switch(action.type){\n                case \"click\":\n                    return await this.performClick(action);\n                case \"drag\":\n                    return await this.performDrag(action);\n                case \"keyboard\":\n                    return await this.performKeyboardAction(action);\n                case \"menu\":\n                    return await this.performMenuAction(action);\n                case \"parameter\":\n                    return await this.performParameterAction(action);\n                case \"device\":\n                    return await this.performDeviceAction(action);\n                case \"track\":\n                    return await this.performTrackAction(action);\n                default:\n                    return {\n                        success: false,\n                        message: \"Unknown action type: \".concat(action.type)\n                    };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                message: \"Failed to execute action: \".concat(error)\n            };\n        }\n    }\n    async performClick(action) {\n        if (action.coordinates) {\n            const success = await this.systemIntegration.clickInBitwig(action.coordinates.x, action.coordinates.y);\n            if (success) {\n                return {\n                    success: true,\n                    message: \"Clicked \".concat(action.target, \" at coordinates (\").concat(action.coordinates.x, \", \").concat(action.coordinates.y, \")\")\n                };\n            } else {\n                return {\n                    success: false,\n                    message: \"Failed to click at coordinates (\".concat(action.coordinates.x, \", \").concat(action.coordinates.y, \")\")\n                };\n            }\n        }\n        return {\n            success: false,\n            message: \"No coordinates provided for click action\"\n        };\n    }\n    async performDrag(action) {\n        if (action.coordinates && action.value) {\n            const success = await this.systemIntegration.dragInBitwig(action.coordinates.x, action.coordinates.y, action.value.x, action.value.y);\n            if (success) {\n                return {\n                    success: true,\n                    message: \"Dragged from (\".concat(action.coordinates.x, \", \").concat(action.coordinates.y, \") to (\").concat(action.value.x, \", \").concat(action.value.y, \")\")\n                };\n            } else {\n                return {\n                    success: false,\n                    message: \"Failed to drag from (\".concat(action.coordinates.x, \", \").concat(action.coordinates.y, \") to (\").concat(action.value.x, \", \").concat(action.value.y, \")\")\n                };\n            }\n        }\n        return {\n            success: false,\n            message: \"Invalid drag parameters\"\n        };\n    }\n    async performKeyboardAction(action) {\n        const success = await this.systemIntegration.sendKeyboardShortcut(action.target);\n        if (success) {\n            return {\n                success: true,\n                message: \"Sent keyboard input: \".concat(action.target)\n            };\n        } else {\n            return {\n                success: false,\n                message: \"Failed to send keyboard input: \".concat(action.target)\n            };\n        }\n    }\n    async performMenuAction(action) {\n        // Menu actions are typically keyboard shortcuts or clicks\n        // For now, we'll treat them as keyboard actions\n        return await this.performKeyboardAction(action);\n    }\n    async performParameterAction(action) {\n        // Parameter actions might involve clicking on UI elements\n        // For now, we'll simulate them\n        console.log(\"Setting parameter \".concat(action.target, \" to \").concat(action.value));\n        // In a real implementation, this would:\n        // 1. Find the parameter control in the UI\n        // 2. Click on it or drag to set the value\n        // 3. Update the parameter\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        return {\n            success: true,\n            message: \"Set parameter \".concat(action.target, \" to \").concat(action.value)\n        };\n    }\n    async performDeviceAction(action) {\n        // Device actions might involve:\n        // - Opening device browser (F4)\n        // - Clicking to add devices\n        // - Dragging devices to tracks\n        switch(action.target){\n            case \"add_eq_device\":\n                // Open device browser and add EQ\n                const browserSuccess = await this.systemIntegration.openDeviceBrowser();\n                if (!browserSuccess) {\n                    return {\n                        success: false,\n                        message: \"Failed to open device browser\"\n                    };\n                }\n                // Wait for browser to open, then click EQ device\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n                // This would click on the EQ device in the browser\n                // For now, we'll simulate success\n                return {\n                    success: true,\n                    message: \"EQ+ device added to track\"\n                };\n            case \"add_selected_device\":\n                // This would drag the selected device to the track\n                return {\n                    success: true,\n                    message: \"Selected device added to track\"\n                };\n            default:\n                return {\n                    success: true,\n                    message: \"Device action completed: \".concat(action.target)\n                };\n        }\n    }\n    async performTrackAction(action) {\n        // Track actions might involve:\n        // - Right-clicking to add tracks\n        // - Clicking track controls\n        // - Managing track settings\n        switch(action.target){\n            case \"add_midi_track\":\n                // This would right-click in track list and select \"Add MIDI Track\"\n                // For now, we'll simulate the action\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n                return {\n                    success: true,\n                    message: \"MIDI track added successfully\"\n                };\n            default:\n                return {\n                    success: true,\n                    message: \"Track action completed: \".concat(action.target)\n                };\n        }\n    }\n    // High-level action methods\n    async createNewProject() {\n        const success = await this.systemIntegration.createNewProject();\n        if (success) {\n            return {\n                success: true,\n                message: \"New project created successfully\"\n            };\n        } else {\n            return {\n                success: false,\n                message: \"Failed to create new project\"\n            };\n        }\n    }\n    async recordAudio() {\n        const actions = [\n            {\n                type: \"click\",\n                target: \"record_arm_button\",\n                coordinates: {\n                    x: 150,\n                    y: 100\n                },\n                description: \"Arm track for recording\"\n            },\n            {\n                type: \"click\",\n                target: \"main_record_button\",\n                coordinates: {\n                    x: 400,\n                    y: 50\n                },\n                description: \"Start recording\"\n            }\n        ];\n        for (const action of actions){\n            const result = await this.executeAction(action);\n            if (!result.success) return result;\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n        }\n        return {\n            success: true,\n            message: \"Audio recording started\"\n        };\n    }\n    async addEQDevice() {\n        const action = {\n            type: \"device\",\n            target: \"add_eq_device\",\n            description: \"Add EQ+ device to track\"\n        };\n        return await this.executeAction(action);\n    }\n    async setTrackVolume(trackIndex, volume) {\n        const action = {\n            type: \"parameter\",\n            target: \"track_volume\",\n            value: volume,\n            description: \"Set track \".concat(trackIndex, \" volume to \").concat(volume, \"dB\")\n        };\n        return await this.executeAction(action);\n    }\n    async enableAutomation() {\n        const success = await this.systemIntegration.toggleAutomation();\n        if (success) {\n            return {\n                success: true,\n                message: \"Automation mode enabled\"\n            };\n        } else {\n            return {\n                success: false,\n                message: \"Failed to enable automation\"\n            };\n        }\n    }\n    // Additional Bitwig control methods\n    async playStop() {\n        const success = await this.systemIntegration.playStop();\n        return {\n            success,\n            message: success ? \"Playback toggled\" : \"Failed to toggle playback\"\n        };\n    }\n    async toggleMetronome() {\n        const success = await this.systemIntegration.toggleMetronome();\n        return {\n            success,\n            message: success ? \"Metronome toggled\" : \"Failed to toggle metronome\"\n        };\n    }\n    async undo() {\n        const success = await this.systemIntegration.undo();\n        return {\n            success,\n            message: success ? \"Undo performed\" : \"Failed to undo\"\n        };\n    }\n    async redo() {\n        const success = await this.systemIntegration.redo();\n        return {\n            success,\n            message: success ? \"Redo performed\" : \"Failed to redo\"\n        };\n    }\n    async saveProject() {\n        const success = await this.systemIntegration.saveProject();\n        return {\n            success,\n            message: success ? \"Project saved\" : \"Failed to save project\"\n        };\n    }\n    async openProject() {\n        const success = await this.systemIntegration.openProject();\n        return {\n            success,\n            message: success ? \"Project opened\" : \"Failed to open project\"\n        };\n    }\n    async exportAudio() {\n        const success = await this.systemIntegration.exportAudio();\n        return {\n            success,\n            message: success ? \"Audio export started\" : \"Failed to start audio export\"\n        };\n    }\n    getConnectionStatus() {\n        return this.isConnected && this.isInitialized;\n    }\n    isInitializationComplete() {\n        return this.isInitialized;\n    }\n    async waitForInitialization() {\n        while(!this.isInitialized){\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n        return this.isConnected;\n    }\n    async reconnect() {\n        this.isConnected = false;\n        this.isInitialized = false;\n        await this.initializeConnection();\n        return this.isConnected;\n    }\n    getSystemInfo() {\n        return {\n            platform: this.systemIntegration.getPlatform(),\n            supported: this.systemIntegration.isSupported()\n        };\n    }\n    constructor(){\n        this.isConnected = false;\n        this.isInitialized = false;\n        this.actionQueue = [];\n        // Only initialize connection on client side\n        if (true) {\n            this.initializeConnection();\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/bitwig-controller.ts\n"));

/***/ })

});